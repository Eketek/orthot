ekvx2 format overview
"Eketech Voxel format, v2"

ekvx2 is a data format which is intended to support Orthot III and to do a better job exposing its features (both planned and current) than ekvx.  To that end, ekvx2 is a more generic format -- Just a JSON-serialized simple Object with two reserved properties and an inheritence-based compression scheme.

Ekvx2 data is a set of simple tables (each consisting solely of sets of key-value pairs) which can inherit from each othe (singular and non-circular).  Each table is called a "template".  If a template inherits from another template, the properties of the parent template are copied to the child template (or something functionally equivalent)

Templates and objects are stored separately (so they can be cleanly distinguished).


For Orthot version 3.0, the "base" template is presumed (determined by a type indicator).  At some future revision, it will require the inclusion of a base template (plan is to have all Orthot objects be of the same Type and to have all object behaviors specified through simple attributes.

ekvx2 has a builtin compression operation focused on 6 common properties (see object specification)


"templates" property
A keyed collection of sets of common properties.  Each template is an arbitrary key-value store.  Templates are used to compactly store properties which are common to all objects generated by an editor tool.  (Each object references one template).  Generally, all templates are going to store object type (it is also valid to place the object type on the object definition, but the ekvx2 editor doesn't do that)

"objects" property
The objects property stores an array of objects.  These are anything that is produced in the ekvx editor (presumably most of these are also going to be loaded into whatever app is using ekvx2).
The peso property ('$') on each object is used for a compact representation of these properties (listed by array index):
  0:  template ID - a reference to the an object containing common properties (including the actual object type)
  1:  x coordinate
  2:  y coordinate
  3:  z coordinate
  4   [If a terrain]:  Terrain-definition ID number (used by BoxTerrain to determine which colors and texture coordinate set to apply when adding the object to the terrain mesh)
  4,5 [If an aligned object]:  Up,Forward vectors.  Used to position and orient aligned objects.  NOTE:  all terrains are unaligned and all aligned objects are not terrain.
Every other property name [other than '$'] on an object is open for arbitrary key-value pairs (anything that can be serialized with JSON).

surfacedefs
A keyed collection of surface definitions.  These store a color and a texture coordinate specification.
Surfacedefs are used to parameterize an function that performs "8-bit" boundary generation (texture coordinate selector that scans 8 neighboring blocks to determine which border tile to use to represent the visible faces of a block).  Here is an example surfacedef (and its American-language interpretation):
{
  "color":"rgb(0,128,0)",       // Color to apply to anything colored by the surfacedef
  "num_rows":16,                // num_rows & num_cols are used to declare the rectangular shape the 256 tiles are laid out in
  "num_cols":16,
  "texcoord_ul":{"x":0,"y":0},  // The relative upper-left corner of the entire tile-patch
  "texcoord_br":{"x":1,"y":1},  // The relative bottom-right corner of the entire tile-patch
  
  "uv2info":{                   // An specification for texture coordinates to be used with another texture atlas (for a decal/ground-texture to combine with the border texture)
    "type":1,                   //  Instructs the decal handler to just take a single specified tile  (at some point, this will likely be extended to include a bit more randomization)
    "lut":{                     // lookup table specification 
      "entry":5,                //  Direct reference to the 5th tile in the resulting texture atlas
      "num_rows":8,             // (num_rows and num_cols mean and do the same thing for the secondary texture coordinate selector as above)
      "num_cols":8
    }
  }
}

terraindefs
A keyed collection of terrain definitions.  Each of these stores a list of 6 surfacedef ids (which are used by BoxTerrain to determine how to represent terrain with a particular ID).  Each terrain object references oneof these.  List order is [north, east, south, west, up, down] (If you care about the internal vectors, they are specified in libek/direction.js)









