20-23 Nov 2019
  Adjustments for changes to BoxTerrain

13-16 Nov 2019
  Replace property arrays (colors, patterns, mergeClasses) with named components.
    Each component is a property list containing one or more attributes which define some logical unit of an object.
    In the case of terrain, a face (or set of faces) would be defined by a component which carries color, pattern, and mergeClass attributes.
    Components may carry well-defined attributes which have specialized editors available (textures, colors, shader properties, etc.), 
    Components may also carry undefined/arbitrary properties which are to be edited with generic editors (strings, numbers, arbitrary JSON objects, etc.)
  [concept] Virtual components - These are configured and interacted with like standard components, but the data is managed by the editor and not directly
    copied to objects (mainly, this is intended for terrain surface specifications, which gets special handling to prevent excessive data duplication).
  Remove the model specification from editor configuration
    The "model" property is now used by the editor to directly reference the model asset to display in-editor
      (related to this was also a decision not to attempt to expand the editor configuration to a general application data/graphics configuration)
    Move model materials to a "materials" component
  Added a simple referencing scheme to the Tool-Definitions
    Objects of form { "ref":"nameA.nameB.nameC ..." } and { "copy":"nameA.nameB.nameC ..." }
    get replaced by either a reference to or a copy of an object in the Tool-Definition namespace.
      (The tool definition namespace is { Tool properties + Abstract-Tool properties } )
      (A roundabout way to use the "materials" component of a tool as materials for the displayed representation of the object)
  Defined components
    materials: An array of objects used to parameterize shaders.
               Object entries are the params objects contianing raw shader properties.
               String entries are materials with the main color field set to the entry value.
    north, east, south, west, up, down:  Virtual components used to hold terrain properties
    vert, horiz, all: Virtual components used for simplified terrain specification (combinations of faces which all use the same parameters)
  Reworked the handling of colors.
    The color picker has been removed from the main GUI and placed on a toggleable floating DIV.
    The color picker is activated by the properties editor when a color button is clicked.
    When a color is picked on the color picker, the picked color is transferred to an arbitrary object property (assigned by the properties editor)
  Added properties editor
    The properties editor constructs a table of all properties defined by object components (organized by component name)
    Properties editor uses a combination of generic and context-specific property editors to allow manipulation of properties.
      Color editor for editing colors
      Text area for editing strings
      Pattern selector
      [TODO] numeric stepper/slider for editing numbers
      [TODO] enumerated type selector
    Additionally, the properties editor can use a custom configuration for a component [rather than individual properties].
    For now, context-specific properties editing is determined by component name (overrideable with the "proped" property in the component specification)
  Handling for MergeClass

12 Nov 2019
  Rename terrain "decal" to "pattern" (every such variable/name/thing that belongs to the editor)
  Removed the random pattern selection from editor initialization.
  Simplify pattern specification:  It now uses number of rows and columns, and an X and Y tile position to define a fixed/default pattern
    (so far as editor/library/game logic is concerned, a "pattern" is only the relative/fractional size and position of a tile on a tilesheet)
  Moved pattern specification to from the abstract "Wall" tool specification to the individual variants.
  Apply patterns with the "box terrain definer" (same mechanism as is used to apply custom colors to terrain)
  Rename, move, and repurpose the "color.amount" field in the tool specification.  It now is "numSurfaceEntries" and applies to both colors and patterns 
    (and later, anything else that needs to be strongly associated with particular faces of a BoxTerrain cube)
  Internals for a pattern selection interface.
  Added logic for "merge classes" (ability to explicitly declare which defined surfaces the auto-texturing system should treat as merged)

9-11 Nov 2019
  Add starting position tool
  Add handling for object alignment'
  Add a "cam light" to the editor
  Various alterations & fixes to object positioning
  Add a Model specification to the application-specific editor configuration (working toward a common configuration system for both the editor and the application)
    colors/materials
    main model name (reference to the model to display)
    poses (for now, sets of mappings of names to model references)
  Add a coexistance check based on spatial classes.  If an object can not coexist with an existing object, the existing object gets replaced.
  Add support for unique objects
  Add horizontal alignment mode ("sane" orientation for things that are to be thought of as standing)
  Add a reset function 

8 Nov 2019
  Add a block-eraser tool
  Force a 3d cursor update after the "left-mouse-button-up" tool operation (immediate cursor updates in mouse-ray pickmode)

7 Nov 2019
  Reset mray pickmode memory on mouse release
  Add UI buttons to select the active tool.
  Gray color-buttons now update the "recent colors" list.

6 Nov 2019
  Tool specifications are now loaded from a JSON-formatted configuration file.
    (intent here is to mostly de-couple EkvxEd from Orthot, to make it a bit easier to turn it into a standalone volumetric layout and modelling tool)

15 Oct 2019 - 5 Nov 2019
  Initial development of EkvxEd2.