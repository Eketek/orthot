0.3.0:
  11 Dec 2019
    Add flags, gates, and named positions to editor configuration and ekvx2 loader
    Add a link to the puzzle editor (ekvxed2 with an auto-loaded orthot configuration) to the UI
    
  10 Dec 2019
    Set terrain "hilites" (static colors that get applied by the shader) from ekvx2
    Added function to load a puzzle from a file
    Added function to reload the main area
    Added function to close a custom puzzle or data package and return to the builtin game data
    Add ekvx2 tools to editor configuration:
      pushblock, crate, iceblock, portal, button, icefloor, exit, stairs, key, lock, mouse, and moose
    
  6-7 Dec 2019
    Apply starting position alignment
    Add InfoBlocks to ekvx2 loader
    Add start message, defeat message, and first-person view properties to the starting position handler in ekvx2 loader
    Add Ladders to ekvx2 loader
    
  3 Dec 2019
    Added a View/camera Object for use with ekvx2 zones.
      These define the initial camera position(s) to use when spawning or teleporting into a zone.
      If multiple points are defined, the view-point which is nearest to the spawn point will be used.
        (behavior from Orthot II / ekvx1 was to use a coordinate-bearing property on the entry point object for camera position)
    
  2 Dec 2019
    Completed ekvx2 import from editor
    Added core functionality of ekvx2 interpreter (Enough to load walls+player [with customized terrain and player-mesh materials] and complete a basic walkaround test)
    Prevent progress codes from being stored when running a zone imported from the editor.
    
  28-29 Nov 2019
    Preparations for ekvx2 loading
      Move ekvx1 interpretation out of Zone
      Fixed a couple defects in ekvx1 interpretation (the defects only affected unused/unfinished content and ekvx1 is getting superseded, but it still bugs me)
      Move material properties [for everything except terrain] to the ekvx interpreter
      Apply materials to individual objects instead of to templates

  25 Nov 2019
    Removed an extraneous property from the Orthot Editor specification
    Add a point of entry for accepting test data from the Puzzle Editor
    
  20-23 Nov 2019
    Adjustments for changes to BoxTerrain
  
  28 Oct 2019:
    Added a 3-dimensional linear plotter with various specialized outputs (intended to support the editor, but designed to be useful generally)
    Specified a null direction
  14 Oct 2019:
    Descriptive texts for regular puzzles all the way through Zone 3.
      (regular puzzles being anything that sticks to the ordinary objects [not scripted or runtime-generated content])
    More Animated dialog features:
      Literal animations
      Text color
      background color
      border color
      font weight
    Disabled keyboard controller "hold" mode due to incompatibility with the execution structure (fixed it, then decided that it was too easy to move two spaces
      when only one is intended).
    Fixed lightweight mode button [mis]behavior
    Fixed property leak from reticle color to environment tint
    Added check to ensure Objects can only be dragged by actual shearing forces
    Made keys a bit more fragile
      If struck with crushing force, keys will be destroyed
      If struck by a lesser force, the moving object will pass through the key.
    Adjust gates to carry crates
    
  12 Oct 2019:
    Added logic to retry displaying InfoBlock messages if TextDisplay is preoccupied with the previous message
    Fixed an error in tick execution process
    Added descriptive texts for everything up to the initial progress-blocking gate (the early tutorial-ish puzzles)
    Added a lightweight mode
      Lightweight mode reduces graphics rendering to an absolute minimum
      Lightweight mode disables all environmental and indefinite animations
        (lighting does not change slowly over time, and keys & InfoBlocks remain motionless)
      In lightweight mode, frames are drawn only when at least one of the following four conditions is satisfied:
        At the end of a tick in which something requested a signfiicant animation (movement)
        Whenever the SceneViewController alters the camera position and/or orientation (User-interaction only)
        Any terrain geometry was built or rebuilt (presently only occurs for a few frames after initial scene setup)
        A reticle icon has been moused over or moused out.
      Lightwieght mode is also implicitly a high-response mode (high-response mode is also set and locked while lightweight mode is active)
      Lightweight mode may be toggled by the button in the upper-right hand corner of the interface
    
  10-12 Oct 2019
    Added a simple dialog box animation system for showing tooltips, flavor text, and error messages
      Textbox animation is mostly intended to perform simple opreations based on a list of commands -- appending or replacing text blocks, fading them in and 
      out, altering various style, and pretty much anything else that is simple and doesn't introduce XSS vulnerabilities 
        (At some point in the future, it might be worth considering adding a markdown library and pairing it with an html sanitizer).
    A slightly more quirky name to better represent a slightly quirky loader (loadEKVX -> EkvxLoaderLoader)
      (EKVX is only downloaded and parsed when "loaded", yielding a prepared Loader, which may then be used any number of times to initialize and re-initialize
       puzzles)
    Added a proper loader
      It forces a reload (bypassing HTTP cache) when the cache contains old data.
      It also loads all data asynchronously (the game should a bit faster)
    Added fallback behavior for scenes which lack a starting position.

  9 Oct 2019
    Replaced "EventReader" (libek/event.js) interface with "NextEvent" (libek/nextevent.js)
      (this is for allowing async functions to receive events)
    Added a generic EventTarget for passing messages between loosely coupled components (orthotCTL.events)
    Keyboard handler state now resets when the page loses focus.
    Added a high-responsive mode
      Ordinarilly, when input is received, it checks to see if anything is still animating and if not, will force the next tick to start on the next frame.
      The new high-responsive mode disables that check, causing it to start the next tick without regard for animation (visually, this teleports everything
      that is in motion to its destination).  If movement button is held down, auto-repeat will eventually take over and cause the game to tick rapidly.
        Note:  Apparent responsiveness issues in high-responsive mode is much more indicative of performance issues than apparent resposiveness problems
               while things are animating.
    Topology system now indicates when an unaligned obstruction should prevent a Creature or Player from being able to hop off a ramp.
      Note:  An unaligned obstruction is a blocking object (such as a Wall) positioned above the space to the side of a ramp
      (Failure to account for this opened up an unintended route in the "keymaze" puzzle, which also caused the "walk" animation controller to do nothing,
       resulting in a temporarilly glitched Player-avatar)

  8 Oct 2019
    Added a brief description of the project to the container HTML document
    Moved all contents of /orthot/orthot to /orthot
    Moved textures and packaged data to /textures
    Implement completion-based triggers (things get enabled or disabled on the basis of Completion codes
      (which are awarded by completing puzzles and persisted in LocalStorage)
    Re-enabled the arbirtarilly obstructive behavior of the gates in the "main" areas
    Added a puzzle completion condition detection warning
    Updated the Main area for Version 3

  7 Oct 2019
    Added more light, more color, and a sky
    Added a panic-halt function to Zone, to aid in dealing with obscure/quirky misconduct
    Added base surface types to Player, Mouse, and Moose
      (This would have resulted in an obscure quirk, but it raised an exception by requesting an unimplemented animation and got caught. Yay for work not done.)
    Update Reticles for recent changes to asset management
    Reposition generated inventory-item indicators
    Assigned a falling strength to Creatures (Also a fix for Mouse and Moose being unable to press buttons)
    Corrected falling strength of various moveable blocks
    Added Progress (Puzzle Completion, Persistent completion data (LocalStorage), Progress indicator-flags (the visible & waving-in-the-pseudo-wind variety))
    Attached references to internal Controls/data structures to the top-level window object [for easier inspection & debugging]
      octl - Orthot main data structure
      ictl - Input Controller
      rctl - Rendering Controller
      sctl - SceneView Controller
      oplayer - Reference to the active Player-avatar instance
    Added a colored outline to inventory item indicators while moused over.

  5 Oct 2019
    Move buttons to the surface they are attached to (puzzle element buttons, not GUI)
    Added a "Creature" abstract type
    Added two implacable foes:  Mouse and Moose
    Various error corrections
    Confused myself for a while by forgetting the distinction between heading and forward vectors.

  4 Oct 2019
    Move asset table to a more appropriate place (libek.assets -> orthotCTL.assets)
    Initial adjustment to make GameData modular.
    Added a puzzle selector

  2 Oct 2019
    Converted all scripts to ES6 modules
    Shortened all script names
    Various code consistancy adjustments
    removed libek.direction.opposite (duplicate of direction.invert)

  17-19 Jan 2019
    Partial implementation of gates and buttons
    Modified tick handler to allow deferred actions.
      Deferred actions are functions which run after all other processing has taken place (tick-listeners, player input,movement)
      If deferred action results in additional movement, the movement engine will be re-activated.
      Deferred actions can also trigger additional deferred actions
    added "stress" and "relax" triggers for informing side-attached objects when movement occurs into or out of an adjacent space.
      sideObject.stress() is called when an object enters the adjacent space
      sideObject.relax() is called when an object departs the adjacent space
    Added shear strength to OrthotObject
      shearStrength is a per-side strength value to used when the object presses against adjacent side-attached objects
      Smaller objects which do not press against adjacent objects (player, creatures, items)
      Large box-like objects should set a numeric value
      Oddly shaped objects should set an array containing the shearing strength value for each side.
  14 Jan 2019
    Fixed force dependency to account for multiple forces dependent upon one
    Fixed a sliding problem
    Reset button no longer steals focus.
    Re-enable an unchecked collision
    Added loop-crashing logic (to resolve loops of moving objects)
  12 Jan 2019
    Revised movement dependency solver
  9 Jan 2019
    Player now slides on ice
    Partial fix for broken complex collision handling [and knowledge of where the rest of the breakage takes place]
  7-8 Jan 2019
    Movement behavior of simple objects has been standardized and is defined and controlled by simple properties:
       surface type (which gets paired up with an adjacent surface to become a surface interaction)
       strength of propagated force (strength of force applied to the next object in the line-of-fire)
       force propagation threshold (strength of force needed for the object to react)
    Added First-person view (with program-controlled and mouse-controlled sub-modes)
    Added ice-blocks and ice-floors
    Adjusted key/lock reticle logic to always pick a contrasting color (uses the hsl hue component only now).
    adjusted a few enumerations
  5 Jan 2019
    The movement engine has been modified to allow multiple forces to be applied to a single object and used contingentially
      The movement engine will propagate all applied forces, but only one of the forces can result in the object moving.
      The movement engine will use force priority and force strength to select the best force to apply to the object.
      If the object does not move under the influence of the highest priority force, it will select a lower priority force (and continue with lower and lower
        priority forces until the object either moves or until all attempts to move the object have failed)
    All objects have been modified to use force priority to manage gravity instead of object state
    Fixed an animation glitch (down-ramp to lower down-ramp)
    An object which is influenced by gravity and which is positioned above a horizontally aligned portal can now push away an object which is obstructing
      a vertically aligned output portal (doing this correctly was the main reason for modifying the movement engine).
  4 Jan 2019
    Fixed several defects in indirect force portal handling which where caused by the "Eketek-made-sweeping-changes-then-completely-forgot-to-test-it" problem
  3 Jan 2019
    The concept of "Indirect Force" has been formalized and added to the movement engine and is now the main mechanism through which gravity and riding is handled.
      (this replaces various informal hacks and is a major improvement over the original design)
    Added crates.
    Keys now ride on top of moving objects
    Old stack-falling logic has been removed and replaced with more consistant handling based on indirect forces.
  2 Jan 2019
    Mousing over the "key" GUI element now causes the game to temporarilly place illustrative reticles around all locks which that key is able to unlock.
  1 Jan 2019
    WASD controls
    puzzle-reset button
    Key and Lock puzzle elements
    Added a continuous multi-axail rotation animation to orthot.AnimateBlock (to be used for items that can be picked up by an orthot.Player)
    orthot.OrthotObject and orthot.StandardObject have been changed from prototype objects to object augmentation functions.
      (Mainly to allow objects to pass their functions around as delegates)
    orthot.Zone changed to call delegate functions tor per-tick updates instead of object.update()
    Removed libek.ui (opted instead to use DOM elements for GUI purposes)
    Added a colorized-image-dropshadow GUI button generator (renderCTL.build_domOBJ)
    Added logic for tooltips and graphical visualizations which are triggered by mousing over objects (both in the 3D scene and GUI elements)
    Various code consistancy adjustments
    disabled timing output from THREE.Objectloader.js
    Removed an unintended puzzle solution
    Added a changelog.